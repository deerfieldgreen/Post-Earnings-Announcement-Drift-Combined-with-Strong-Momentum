# https://quantpedia.com/strategies/post-earnings-announcement-drift-combined-with-strong-momentum/
#
# The investment universe consists of all stocks from NYSE, AMEX and NASDAQ with a price greater than $5. Each quarter, all stocks are
# sorted into deciles based on their 12 months past performance. The investor then uses only stocks from the top momentum decile and 
# goes long on each stock 5 days before the earnings announcement and closes the long position at the close of the announcement day. 
# Subsequently, at the close of the announcement day, he/she goes short and he/she closes his short position on the 5th day after the
# earnings announcement.
#
# QC Implementation:
#   - Investment universe consist of stocks with earnings data available.

from pandas.tseries.offsets import BDay
from AlgorithmImports import *
import data_tools

class PostEarningsAnnouncement(QCAlgorithm):

    def Initialize(self):
        self.SetStartDate(2023, 6, 1)   # earnings days data starts in 2010
        self.SetCash(100000)
        
        self.quantile:int = 10

        self.period:int = 12 * 21 # need n daily prices
        self.rebalance_period:int = 3 # referes to months, which has to pass, before next portfolio rebalance

        self.leverage:int = 5

        self.data:dict[Symbol, data_tools.SymbolData] = {} 
        self.selected_symbols:list[Symbol] = []
        
        # 50 equally weighted brackets for traded symbols
        self.managed_symbols_size:int = 50
        self.managed_symbols:list[data_tools.ManagedSymbol] = []

        # earning data parsing
        self.earnings:dict[datetime.date, list[str]] = {}
        days_before_earnings:list[datetime.date] = []

        # Empty dictionary for option contracts
        self.option_contracts:dict[Symbol, Option] = {}
        
        earnings_set:Set(str) = set()
        earnings_data:str = self.Download('data.quantpedia.com/backtesting_data/economic/earnings_dates_eps.json')
        earnings_data_json:list[dict] = json.loads(earnings_data)

        for obj in earnings_data_json:
            date:datetime.date = datetime.strptime(obj['date'], "%Y-%m-%d").date()

            self.earnings[date] = []
            days_before_earnings.append(date - BDay(5))
            
            for stock_data in obj['stocks']:
                ticker:str = stock_data['ticker']

                self.earnings[date].append(ticker)
                earnings_set.add(ticker)

        self.earnings_universe:list[str] = list(earnings_set)
        
        self.symbol:Symbol = self.AddEquity('SPY', Resolution.Daily).Symbol

        self.months_counter:int = 0
        self.selection_flag:bool = False
        self.UniverseSettings.Resolution = Resolution.Daily
        self.AddUniverse(self.CoarseSelectionFunction)
        
        # Events on earnings days, before and after earning days.
        self.Schedule.On(self.DateRules.On(days_before_earnings), self.TimeRules.AfterMarketOpen(self.symbol), self.DaysBefore)
        self.Schedule.On(self.DateRules.MonthStart(self.symbol), self.TimeRules.AfterMarketOpen(self.symbol), self.Selection)
    
    def OnSecuritiesChanged(self, changes):
        for security in changes.AddedSecurities:
            security.SetFeeModel(data_tools.CustomFeeModel())
            security.SetLeverage(self.leverage)
                
    def CoarseSelectionFunction(self, coarse):
        # daily update of prices
        for stock in coarse:
            symbol:Symbol = stock.Symbol

            if symbol in self.data:
                self.data[symbol].update(stock.AdjustedPrice)
        
        if not self.selection_flag:
            return Universe.Unchanged
        self.selection_flag = False
        
        selected:list[Symbol] = [x.Symbol for x in coarse if x.HasFundamentalData 
                                and x.Market == 'usa' and x.Price > 5
                                and x.Symbol.Value in self.earnings_universe]
                                
        # warm up prices
        for symbol in selected:
            if symbol in self.data:
                continue
        
            self.data[symbol] = data_tools.SymbolData(self.period)
            history = self.History(symbol, self.period, Resolution.Daily)

            if history.empty:
                self.Log(f"Not enough data for {symbol} yet")
                continue

            closes = history.loc[symbol].close
            for _, close in closes.iteritems():
                self.data[symbol].update(close)
        
        # calculate momentum for each stock in self.earnings_universe
        momentum:dict[Symbol, float] = { symbol: self.data[symbol].performance() for symbol in selected if self.data[symbol].is_ready() }
                
        if len(momentum) < self.quantile:
            self.selected_symbols = []
            return Universe.Unchanged
            
        quantile:int = int(len(momentum) / self.quantile)
        sorted_by_mom:list[Symbol] = [x[0] for x in sorted(momentum.items(), key=lambda item: item[1])]
        # the investor uses only stocks from the top momentum quantile
        self.selected_symbols = sorted_by_mom[-quantile:]
        
        return self.selected_symbols

    def SelectOptionContract(self, underlying_symbol, expiry_date):
        if underlying_symbol not in self.option_contracts:
            # Add option for the underlying symbol
            option = self.AddOption(underlying_symbol)
            option.SetFilter(-1, 1, timedelta(0), timedelta(30))
            self.option_contracts[underlying_symbol] = option

        # get the option chain for the underlying_symbol
        option_chain = self.OptionChainProvider.GetOptionContractList(underlying_symbol, self.Time)
            
        # filter the option contracts based on the expiry date
        contracts = [i for i in option_chain if i.ID.Date.date() >= expiry_date]

        if len(contracts) == 0:
            return None

        # sort the contracts by their expiry date and pick the first one
        contracts = sorted(contracts, key=lambda x: x.ID.Date.date())
        return contracts[0]

    def DaysBefore(self):
        # every day check if 5 days from now is any earnings day
        earnings_date:datetime.date = (self.Time + BDay(5)).date()
        date_to_liquidate:datetime.date = (earnings_date + BDay(6)).date()
        
        if earnings_date not in self.earnings:
            return

        for symbol in self.selected_symbols:
            ticker:str = symbol.Value
            # is there any symbol which has earnings in 5 days
            if ticker not in self.earnings[earnings_date]:
                continue

            if (len(self.managed_symbols) < self.managed_symbols_size) and not self.Securities[symbol].Invested and \
                self.Securities[symbol].Price != 0 and self.Securities[symbol].IsTradable:

                #select the option contract
                option_contract = self.SelectOptionContract(symbol,earnings_date)
                if option_contract is not None:
                    # NOTE: Must offset date to switch position by one day due to midnight execution of OnData function.
                    # Alternatively, there's is a possibility to switch to BeforeMarketClose function.
                    # log the details of the contract and the dates

                    ##For earnings date, have it be x.Expiry which is the expiration date
                    self.Log(f'Symbol: {symbol.Value}, Option Contract: {option_contract}, Open date: {self.Time}, Expiration Date:{option_contract.ID.Date} , Earnings announcement: {earnings_date}')
                    
                    
                    #self.SetHoldings(option_contract, 1 / self.managed_symbols_size)

                    self.managed_symbols.append(data_tools.ManagedSymbol(symbol, earnings_date + BDay(1), date_to_liquidate))

                else:
                    self.Log(f"No option contract found for symbol: {symbol.Value} on earnings date: {earnings_date}")
                    
    def OnData(self, data):
        # switch positions on earnings days.
        curr_date:datetime.date = self.Time.date()
        
        managed_symbols_to_delete:list[data_tools.ManagedSymbol] = []
        for managed_symbol in self.managed_symbols:
            if managed_symbol.date_to_switch == curr_date:
                # switch position from long to short
                self.SetHoldings(managed_symbol.symbol, -1 / self.managed_symbols_size)
                ## sell long calls, and then next line go long puts
            
            elif managed_symbol.date_to_liquidate <= curr_date:
                self.Liquidate(managed_symbol.symbol)
                managed_symbols_to_delete.append(managed_symbol)
                #sell long puts
                
        # remove symbols from management
        for managed_symbol in managed_symbols_to_delete:
            self.managed_symbols.remove(managed_symbol)
            
    def Selection(self):
        # quarter selection
        if self.months_counter % self.rebalance_period == 0:
            self.selection_flag = True
        self.months_counter += 1
